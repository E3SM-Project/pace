#! /usr/bin/env python

import argparse
import requests
import sys
import os, shutil
import zipfile, tarfile
import getpass


# use this url after merge to master
url = "https://pace.ornl.gov/upload"

# argumented parser
def parseArguments(): 
	parser = argparse.ArgumentParser(description="PACE upload tool.")
	parser.add_argument('-ed', action='store', dest='source', help="Experiment directory Name", required=True)
	#parser.add_argument('--perf-archive', '-pa',help="perf archive name", required=True)
	args = parser.parse_args()
	# print args
	return args

# zips all files in the list
def createOutputZip(zfname, filelist):
	zf = zipfile.ZipFile("%s.zip" % (zfname), "w", zipfile.ZIP_DEFLATED)
	for f in filelist:
		arcname = zfname + "/" + f
		print "Adding file: %s to archive: %s.zip" % (arcname, zfname)
		zf.write(f,arcname)
	zf.close()
	return

# zips given directory path
def zipSubdir(zfname, path):
	zf = zipfile.ZipFile("%s.zip" % (zfname), "w", zipfile.ZIP_DEFLATED)
	abs_src = os.path.abspath(path)
	for root,dirs,files in os.walk(path):
		for file in files:
			absname = os.path.abspath(os.path.join(root, file))
			arcname = zfname + "/" + absname[len(abs_src) + 1:]
			print "Adding file: %s to archive: %s.zip" % (arcname, zfname)
			zf.write(absname,arcname)
	zf.close()
	return

# upload E3SM experiment files
def uploadE3SMexp(uploadfile):
	if(os.path.exists(uploadfile)):
		if(os.stat(uploadfile).st_size!=0):
			# open zip to be uploaded
			fin = open(uploadfile, 'rb')			
			files = {'file': fin}
			try:
				# request for connection to server
				r = requests.post(url, files=files)
				print(r.text)
			finally:
				fin.close()
		else:
			print('Nothing to upload, Empty zip folder')
	else:
		print('Nothing to upload, Exiting ...')


# main start
result=parseArguments()
zfname = 'experiments'
expfile = result.source
timefile = False
etimefile = False
completeexp = False
# If path is not empty

if(expfile!='' and os.path.isdir(expfile)):
	#tar = tarfile.open(expfile)
	# grab all files
	#tmpfile= tar.getnames()			
	# check for "timing." and "e3sm_timing." files
	#for x in range(len(tmpfile)):
	#	tmpname=tmpfile[x].split("/")
	#	if timefile==False or etimefile==False:
	#		for i in range(len(tmpname)):
	#			# These files should not be empty
	#			if tmpname[i].startswith("timing.") and timefile==False:	
	#				timefile=True
	#			if tmpname[i].startswith("e3sm_timing.") and etimefile==False:
	#				etimefile=True
	#			# both file valid, so we done, no more iterations
	#			if timefile == True and etimefile == True:
	#				break
	#	# no more iteration needed
	#	if timefile == True and etimefile == True:
	#		completeexp=True			
	#		break
	
	for path, subdirs, files in os.walk(expfile):
		for name in files:
			if name.startswith("timing.") and timefile==False:	
				timefile=True
			if name.startswith("e3sm_timing.") and etimefile==False:
				etimefile=True
			# both file valid, so we done, no more iterations
			if timefile == True and etimefile == True:
				break
		# no more iteration needed
		if timefile == True and etimefile == True:
			completeexp=True			
			break	
	# close the zip file	
	if completeexp==True:	
		# aggregate all file		
		zipSubdir(zfname,expfile)
		uploadfile='experiments.zip'
		# upload E3SM experiment file		
		uploadE3SMexp(uploadfile)
		# remove temporary aggregated file
		os.remove(uploadfile)
	else:
		# experiment is incomplete when there are no file containing "timing.*" and "e3sm_timing.*"
		print("This experiment is incomplete")
else:
	print('Empty path')


