#! /usr/bin/env python

# imports
import argparse
import requests
import sys
import os, shutil, distutils
from distutils import dir_util
import zipfile, tarfile
import getpass
from datetime import datetime


# server connection url
url = "https://pace.ornl.gov/upload"

# argumented parser
def parseArguments(): 
	parser = argparse.ArgumentParser(description="PACE upload tool.")
	# Argument parser for E3SM experiments
	parser.add_argument('--exp-dir','-ed', action='store', dest='source', help="Root directory containing experiment(s) results. Handles multiple experiment directories under root", required=True)
	parser.add_argument('--application', '-a', help="Application name", default='e3sm', choices=['e3sm','fusion'])
	args = parser.parse_args()
	return args

# Aggregate into zip for given directory path
def zipSubdir(zfname, path):
	zf = zipfile.ZipFile("%s.zip" % (zfname), "w", zipfile.ZIP_DEFLATED)
	abs_src = os.path.abspath(path)
	for root,dirs,files in os.walk(path):
		for file in files:
			absname = os.path.abspath(os.path.join(root, file))
			arcname = zfname + "/" + absname[len(abs_src) + 1:]
			zf.write(absname,arcname)
	zf.close()
	return

# upload experiment files
def uploadExp(uploadfile):
	# error check empty file
	if(os.path.exists(uploadfile)):
		if(os.stat(uploadfile).st_size!=0):
			# open zip to be uploaded
			fin = open(uploadfile, 'rb')			
			files = {'file': fin}
			try:
				# request for connection to server
				r = requests.post(url, files=files)
				print(r.text)
			finally:
				fin.close()
		else:
			print('Error: Unable to upload, %s is empty' %uploadfile)
			exit()
	else:
		print('Error: Unable to upload %s, No such file' %uploadfile)
		exit()

# validate E3SM experiment
def isValidE3SMexp(expfile):
	# validation flag
	timefile = False
	etimefile = False
	completeexp = False
	# creation of temporary file 
	tmpfile = 'pace-exps-' + datetime.now().strftime('%Y-%m-%d-%H:%M:%S')
	# lists to store complete experiment paths	
	explist = []
	# iterate to check for timing files
	for path, subdirs, files in os.walk(expfile):
		for name in files:
			# experiment is incomplete when there are no file containing "timing.*" and "e3sm_timing.*"			
			if name.startswith("timing."):			
				timefile=True
			if name.startswith("e3sm_timing."):
				etimefile=True	
			if etimefile == True and timefile == True :
				completeexp=True
				explist.append(path)
				etimefile = False
				timefile = False
		
	# for complete experiments 

	if completeexp == True:
		i=0
		# make sure temporary folder does not exists and copy them into temporary folder
		if (os.path.exists(tmpfile)):
			distutils.dir_util.remove_tree(tmpfile)
		for f in explist:
			distutils.dir_util.copy_tree(f,tmpfile+'/exp'+str(i))
			i=i+1
		return(True)
	else:
		return(False)

# validate Fusion experiment
def isValidFusionExp(expfile):
	return False	

# main 
def main():
	# parse argument
	result=parseArguments()
	zfname = 'experiments'
	expfile = result.source
	tmpfile = 'pace-exps-' + datetime.now().strftime('%Y-%m-%d-%H:%M:%S')
	# If path is not empty, and is a directory
	if(expfile!=''):
		if (result.application=='e3sm' and isValidE3SMexp(expfile)==True): 	
			# aggregate all file
			zipSubdir(zfname,tmpfile)
			uploadfile='experiments.zip'
			# upload experiment file		
			uploadExp(uploadfile)
			# remove temporary aggregated file
			os.remove(uploadfile)
			distutils.dir_util.remove_tree(tmpfile)
		elif (result.application=='fusion' and isValidFusionExp(expfile)==True):
			exit()		
		else:
			print("Error: %s is not a valid experiment" %expfile)
			exit()
	else:
		print('Error: %s is empty' %expfile)
		exit()


if __name__ == "__main__":
	main()
