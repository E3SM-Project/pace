#! /usr/bin/env python

# imports
import argparse
import requests
import sys
import json
import os, shutil, distutils
from distutils import dir_util
import zipfile, tarfile
import getpass
import stat
from stat import *
from datetime import datetime
from ConfigParser import RawConfigParser
from urlparse import urljoin

# api for github
GITHUB_API = 'https://api.github.com'

# server connection url
uploadurl = "https://pace.ornl.gov/upload"

# authenticuser url
authurl = "https://pace.ornl.gov/userauth"

# argumented parser
def parseArguments(): 
	parser = argparse.ArgumentParser(description="PACE upload tool.")
	# Argument parser for E3SM experiments
	parser.add_argument('--exp-dir','-ed', action='store', dest='source', help="Root directory containing experiment(s) results. Handles multiple experiment directories under root")
	parser.add_argument('--perf-archive','-pa', action='store', dest='source', help="Root directory containing performance archive. Handles multiple performance archive directories under root")
	parser.add_argument('--application', '-a', help="Application name", default='e3sm', choices=['e3sm','fusion'])
	args = parser.parse_args()
	return args

# Aggregate into zip for given directory path
def zipSubdir(zfname, path):
	zf = zipfile.ZipFile("%s.zip" % (zfname), "w", zipfile.ZIP_DEFLATED)
	abs_src = os.path.abspath(path)
	for root,dirs,files in os.walk(path):
		for file in files:
			absname = os.path.abspath(os.path.join(root, file))
			arcname = zfname + "/" + absname[len(abs_src) + 1:]
			zf.write(absname,arcname)
	zf.close()
	return

# upload experiment files
def uploadExp(uploadfile):
	# error check empty file
	if(os.path.exists(uploadfile)):
		if(os.stat(uploadfile).st_size!=0):
			# open zip to be uploaded
			fin = open(uploadfile, 'rb')			
			files = {'file': fin}
			try:
				# request for connection to server
				r = requests.post(uploadurl, files=files)
				print(r.text)
			finally:
				fin.close()
		else:
			print('Error: Unable to upload, %s is empty' %uploadfile)
			exit()
	else:
		print('Error: Unable to upload %s, No such file' %uploadfile)
		exit()

# validate E3SM experiment
def isValidE3SMexp(expfile):
	# validation flag
	modeltimefile = False
	e3smtimefile = False
	gitverfile = False
	completeexp = False
	# creation of temporary file 
	tmpfile = 'pace-exps-' + datetime.now().strftime('%Y-%m-%d-%H:%M:%S')
	# lists to store complete experiment paths	
	explist = []
	# iterate to check for timing files
	for path, subdirs, files in os.walk(expfile):
		for name in files:
			# experiment is incomplete when there are no file containing "timing.*" and "e3sm_timing.*"			
			if name.startswith("timing."):			
				modeltimefile=True
			if name.startswith("e3sm_timing."):
				e3smtimefile=True
			if name.startswith("GIT_DESCRIBE."):
				gitverfile=True
			if e3smtimefile == True and modeltimefile == True and gitverfile == True:
				completeexp=True
				explist.append(path)
				e3smtimefile = False
				modeltimefile = False
				gitverfile =False
				
		
	# for complete experiments 

	if completeexp == True:
		i=0
		# make sure temporary folder does not exists and copy them into temporary folder
		if (os.path.exists(tmpfile)):
			distutils.dir_util.remove_tree(tmpfile)
		for f in explist:
			distutils.dir_util.copy_tree(f,tmpfile+'/exp'+str(i))
			i=i+1
		return(True)
	else:
		return(False)

# validate Fusion experiment
def isValidFusionExp(expfile):
	return False	

def getGitToken():
	configFile = None
	if os.path.isfile('.pacecc'):
		configFile = '.pacecc'
		user,token = readconfigfile(configFile)
	else:
		user,token = createtoken()
		createconfigfile(user,token)
	return (token)

def authenticateUser(user):
	data = {'user':user}
	r = requests.post(authurl,data=data)
	if r.text == "validuser":
		print ("Welcome "+str(user))
		return (True)
	else:
		print ("ERROR: User NOT AUTHORIZED")
		return (False)

def gitAuthenticate(token):
	try:
		headers = {'Authorization': 'token ' + token}
		login = requests.get('https://api.github.com/user', headers=headers)
		user = login.json()['login']
	except KeyError:
		print 'ERROR: Github authentication failed, Invalid Token.'
		exit()
	validUser = authenticateUser(user)
	return (validUser)

def createtoken():
	#User Input
	
    	username = raw_input('Github username: ')
    	password = getpass.getpass('Github password: ')
    	note = raw_input('Note (optional): ')
    	url = urljoin(GITHUB_API, 'authorizations')
    	payload = {}
    	if note is None:
        	payload['note'] = note
	else:
		payload['note'] = 'PACE user'
    	res = requests.post(
        	url,
        	auth = (username, password),
        	data = json.dumps(payload),
        	)
    
    	j = json.loads(res.text)
	if res.status_code >= 400:
		msg = j.get('message','UNDEFINED ERROR (no error description from server)')
		print 'ERROR: %s' % msg
		exit()
	token = j['token']
	return (username,token)

def readconfigfile(configFile):
	parser = RawConfigParser()
	parser.read(configFile)
	myUser = parser.get('USERINFO','username')
	myToken = parser.get('USERINFO','token')
	return (myUser,myToken)

def createconfigfile(user,token):
	parser = RawConfigParser()
	parser.add_section('USERINFO')
	parser.set('USERINFO','username',user)
	parser.set('USERINFO','token',token)
	filename=open('.pacecc','w')
	parser.write(filename)
	return

def userAuth():
	token = getGitToken()
	isSuccess = gitAuthenticate(token)
	if isSuccess == True:
		return
	else:
		exit()

# main 
def main():
	# parse argument
	userAuth()
	result=parseArguments()
	zfname = 'experiments'
	expfile = result.source
	tmpfile = 'pace-exps-' + datetime.now().strftime('%Y-%m-%d-%H:%M:%S')
	# If path is not empty, and is a directory
	if(expfile!=''):
		if (result.application=='e3sm' and isValidE3SMexp(expfile)==True): 	
			# aggregate all file
			zipSubdir(zfname,tmpfile)
			uploadfile='experiments.zip'
			# upload experiment file		
			uploadExp(uploadfile)
			# remove temporary aggregated file
			os.remove(uploadfile)
			distutils.dir_util.remove_tree(tmpfile)
		elif (result.application=='fusion' and isValidFusionExp(expfile)==True):
			exit()		
		else:
			print("Error: %s is not a valid experiment" %expfile)
			exit()
	else:
		print('Error: %s is empty' %expfile)
		exit()


if __name__ == "__main__":
	main()
